char* removeDuplicateLetters(char* s) {
    int i = 0;
    int* charFreq = calloc(26, sizeof(int));
    while (s[i] != '\0') {
        charFreq[s[i++] - 'a']++;
    }

    int* StackVal = calloc(26, sizeof(int));
    bool* StackStatus = calloc(26, sizeof(bool));
    int j = 0; // Tracks new position for stack
    i = 0;
    while (s[i] != '\0') {
        int index = s[i] - 'a';
        charFreq[index]--;

       
        if (!StackStatus[index]) {
            // Adjust Monotonic Stack pointer based on previous values.
            while (j > 0 && StackVal[j - 1] > index &&
                   charFreq[StackVal[j - 1]] > 0) {
                StackStatus[StackVal[j - 1]] = false;
                j--;
            }

            
            StackVal[j++] = index;
            StackStatus[index] = true;
        }
        i++;
    }

    char* ans = malloc((j + 1) * sizeof(char));
    i = 0;
    while (i < j) {
        ans[i] = 'a' + (StackVal[i]);
        i++;
    }
    ans[i] = '\0';

    free(charFreq);
    free(StackVal);
    free(StackStatus);

    return ans;
}
