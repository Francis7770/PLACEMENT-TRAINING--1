
#include <stdlib.h>
#include <string.h>

int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

int* largestDivisibleSubset(int* nums, int numsSize, int* returnSize) {
    if (numsSize == 0) {
        *returnSize = 0;
        return NULL;
    }
    
  
    qsort(nums, numsSize, sizeof(int), compare);
    
    int *dp = (int *)malloc(numsSize * sizeof(int));
    int *prev_index = (int *)malloc(numsSize * sizeof(int));
    for (int i = 0; i < numsSize; ++i) {
        dp[i] = 1;
        prev_index[i] = -1;
    }
    
    int maxi = 0;
    for (int i = 1; i < numsSize; i++) {
        for (int j = 0; j < i; j++) {
            if (nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1) {
                dp[i] = dp[j] + 1;
                prev_index[i] = j;
                if (dp[i] > dp[maxi])
                    maxi = i;
            }
        }
    }
    

    int count = dp[maxi];
    *returnSize = count;
    int *result = (int *)malloc(count * sizeof(int));
    for (int i = count - 1; i >= 0; --i) {
        result[i] = nums[maxi];
        maxi = prev_index[maxi];
    }
    
    free(dp);
    free(prev_index);
    
    return result;
}
